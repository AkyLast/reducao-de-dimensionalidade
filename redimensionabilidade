{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/AkyLast/reducao-de-dimensionalidade/blob/main/redimensionabilidade\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from PIL import Image"
      ],
      "metadata": {
        "id": "Do5Z1znrjlwW"
      },
      "execution_count": 28,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "input_file_jpg = \"img_colorida.jpg\"\n",
        "saida_bmp = \"img.bmp\"\n",
        "output_file = \"img_gray.bmp\""
      ],
      "metadata": {
        "id": "L8eHslLckTmh"
      },
      "execution_count": 29,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def convert_to_bmp(input_file_jpg, saida_bmp, output_file):\n",
        "  with Image.open(input_file_jpg) as img:\n",
        "    img.save(saida_bmp, format = 'BMP')\n",
        "\n",
        "  bmp_data = read_bmp(saida_bmp)\n",
        "  manipulation_bmp = convert_to_grayscale(bmp_data, binary = 1)\n",
        "  write_bmp(output_file, manipulation_bmp)\n",
        "\n",
        "  return f\"Imagem redimensionada e salva em {output_file}!\""
      ],
      "metadata": {
        "id": "OzYmQVj7kVGW"
      },
      "execution_count": 30,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def read_bmp(filename):\n",
        "  with open(filename, \"rb\") as f:\n",
        "    data = f.read()\n",
        "    return data\n",
        "\n",
        "def write_bmp(filename, data):\n",
        "  with open(filename, \"wb\") as f:\n",
        "    f.write(data)\n",
        "\n",
        "def convert_to_grayscale(bmp_data, binary = 0):\n",
        "  header = bmp_data[:54]\n",
        "  pixel_data = bmp_data[54:]\n",
        "\n",
        "  if binary == 0:\n",
        "    manipulation_pixels = bytearray()\n",
        "    for i in range(0, len(pixel_data), 3):\n",
        "      b, g, r = pixel_data[i], pixel_data[i + 1], pixel_data[i + 2]\n",
        "      gray = (r + g + b) // 3\n",
        "      manipulation_pixels.extend([gray, gray, gray])\n",
        "\n",
        "  else:\n",
        "    manipulation_pixels = bytearray()\n",
        "    for i in range(0, len(pixel_data), 3):\n",
        "      b, g, r = pixel_data[i], pixel_data[i + 1], pixel_data[i + 2]\n",
        "      gray = (r + g + b) // 3\n",
        "      binary_pixel = 255 if gray > 128 else 0\n",
        "      manipulation_pixels.extend([binary_pixel, binary_pixel, binary_pixel])\n",
        "\n",
        "  return header + manipulation_pixels\n"
      ],
      "metadata": {
        "id": "Z9M2Me07lV61"
      },
      "execution_count": 31,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "redimencionar = convert_to_bmp(input_file_jpg, saida_bmp, output_file)\n",
        "print(redimencionar)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mG_4HZHJoG5R",
        "outputId": "23a8a6f5-f73d-4dc6-aa52-d1744ffc98cb"
      },
      "execution_count": 32,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Imagem redimensionada e salva em img_gray.bmp.\n"
          ]
        }
      ]
    }
  ],
  "metadata": {
    "colab": {
      "name": "Olá, este é o Colaboratory",
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}